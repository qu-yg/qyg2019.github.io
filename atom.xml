<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yg.qu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.github.com/qyg2019/"/>
  <updated>2019-12-28T14:35:32.761Z</updated>
  <id>https://www.github.com/qyg2019/</id>
  
  <author>
    <name>屈永国</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue实例的生命周期</title>
    <link href="https://www.github.com/qyg2019/2020/01/12/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://www.github.com/qyg2019/2020/01/12/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2020-01-12T04:50:36.899Z</published>
    <updated>2019-12-28T14:35:32.761Z</updated>
    
    <content type="html"><![CDATA[<h3 id="VUE实例的生命周期"><a href="#VUE实例的生命周期" class="headerlink" title="VUE实例的生命周期"></a>VUE实例的生命周期</h3><hr><ul><li><p>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</p></li><li><p><a href="https://cn.vuejs.org/v2/api/#选项-生命周期钩子" target="_blank" rel="noopener">生命周期钩子</a>：就是生命周期事件的别名而已；</p></li><li><p>生命周期钩子 = 生命周期函数 = 生命周期事件</p></li></ul><h4 id="主要的生命周期函数分类："><a href="#主要的生命周期函数分类：" class="headerlink" title="主要的生命周期函数分类："></a>主要的生命周期函数分类：</h4><ul><li><p>创建期间的生命周期函数：</p><ul><li><p>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</p><ul><li><p>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</p></li><li><p>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</p></li><li><p>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</p></li></ul></li></ul></li></ul><ul><li><p>运行期间的生命周期函数：</p><ul><li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点<ul><li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li></ul></li></ul></li></ul><ul><li>销毁期间的生命周期函数：<ul><li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。<ul><li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul></li></ul></li></ul><p><img src="/img/lifecycle.png" alt="生命周期"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;VUE实例的生命周期&quot;&gt;&lt;a href=&quot;#VUE实例的生命周期&quot; class=&quot;headerlink&quot; title=&quot;VUE实例的生命周期&quot;&gt;&lt;/a&gt;VUE实例的生命周期&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;什么是生命周期：从Vue实例创建、运行、到销毁期
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://www.github.com/qyg2019/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://www.github.com/qyg2019/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack使用</title>
    <link href="https://www.github.com/qyg2019/2020/01/05/webpack/"/>
    <id>https://www.github.com/qyg2019/2020/01/05/webpack/</id>
    <published>2020-01-05T11:40:54.038Z</published>
    <updated>2019-12-28T14:25:59.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在网页中会引用哪些常见的静态资源？"><a href="#在网页中会引用哪些常见的静态资源？" class="headerlink" title="在网页中会引用哪些常见的静态资源？"></a>在网页中会引用哪些常见的静态资源？</h2><ul><li>JS<ul><li>.js  .jsx  .coffee  .ts（TypeScript  类 C# 语言）</li></ul></li><li>CSS<ul><li>.css  .less   .sass  .scss</li></ul></li><li>Images<ul><li>.jpg   .png   .gif   .bmp   .svg</li></ul></li><li>字体文件（Fonts）<ul><li>.svg   .ttf   .eot   .woff   .woff2</li></ul></li><li>模板文件<ul><li>.ejs   .jade  .vue</li></ul></li></ul><h2 id="网页中引入的静态资源多了以后有什么问题？？？"><a href="#网页中引入的静态资源多了以后有什么问题？？？" class="headerlink" title="网页中引入的静态资源多了以后有什么问题？？？"></a>网页中引入的静态资源多了以后有什么问题？？？</h2><ol><li>网页加载速度慢， 因为 我们要发起很多的二次请求；</li><li>要处理错综复杂的依赖关系</li></ol><h2 id="如何解决上述两个问题"><a href="#如何解决上述两个问题" class="headerlink" title="如何解决上述两个问题"></a>如何解决上述两个问题</h2><ol><li>合并、压缩、精灵图、图片的Base64编码</li><li>可以使用之前学过的requireJS、也可以使用webpack可以解决各个包之间的复杂依赖关系；</li></ol><h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack?"></a>什么是webpack?</h2><p>webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；</p><h2 id="如何完美实现上述的2种解决方案"><a href="#如何完美实现上述的2种解决方案" class="headerlink" title="如何完美实现上述的2种解决方案"></a>如何完美实现上述的2种解决方案</h2><ol><li>使用Gulp， 是基于 task 任务的；</li><li>使用Webpack， 是基于整个项目进行构建的；</li></ol><ul><li>借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</li><li>根据官网的图片介绍webpack打包的过程</li></ul><h2 id="webpack安装的两种方式"><a href="#webpack安装的两种方式" class="headerlink" title="webpack安装的两种方式"></a>webpack安装的两种方式</h2><ol><li>运行<code>npm i webpack -g</code>全局安装webpack，这样就能在全局使用webpack的命令</li><li>在项目根目录中运行<code>npm i webpack --save-dev</code>安装到项目依赖中</li></ol><h2 id="初步使用webpack打包构建列表隔行变色案例"><a href="#初步使用webpack打包构建列表隔行变色案例" class="headerlink" title="初步使用webpack打包构建列表隔行变色案例"></a>初步使用webpack打包构建列表隔行变色案例</h2><ol><li>运行<code>npm init</code>初始化项目，使用npm管理项目中的依赖包</li><li>创建项目基本的目录结构</li><li>使用<code>cnpm i jquery --save</code>安装jquery类库</li><li>创建<code>main.js</code>并书写各行变色的代码逻辑：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 导入jquery类库</span><br><span class="line">   import $ from &#39;jquery&#39;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; 设置偶数行背景色，索引从0开始，0是偶数</span><br><span class="line">   $(&#39;#list li:even&#39;).css(&#39;backgroundColor&#39;,&#39;lightblue&#39;);</span><br><span class="line">   &#x2F;&#x2F; 设置奇数行背景色</span><br><span class="line">   $(&#39;#list li:odd&#39;).css(&#39;backgroundColor&#39;,&#39;pink&#39;);</span><br></pre></td></tr></table></figure></li><li>直接在页面上引用<code>main.js</code>会报错，因为浏览器不认识<code>import</code>这种高级的JS语法，需要使用webpack进行处理，webpack默认会把这种高级的语法转换为低级的浏览器能识别的语法；</li><li>运行<code>webpack 入口文件路径 输出文件路径</code>对<code>main.js</code>进行处理：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack src&#x2F;js&#x2F;main.js dist&#x2F;bundle.js</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用webpack的配置文件简化打包时候的命令"><a href="#使用webpack的配置文件简化打包时候的命令" class="headerlink" title="使用webpack的配置文件简化打包时候的命令"></a>使用webpack的配置文件简化打包时候的命令</h2><ol><li>在项目根目录中创建<code>webpack.config.js</code></li><li>由于运行webpack命令的时候，webpack需要指定入口文件和输出文件的路径，所以，我们需要在<code>webpack.config.js</code>中配置这两个路径：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 导入处理路径的模块</span><br><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: path.resolve(__dirname, &#39;src&#x2F;js&#x2F;main.js&#39;), &#x2F;&#x2F; 项目入口文件</span><br><span class="line">    output: &#123; &#x2F;&#x2F; 配置输出选项</span><br><span class="line">        path: path.resolve(__dirname, &#39;dist&#39;), &#x2F;&#x2F; 配置输出的路径</span><br><span class="line">        filename: &#39;bundle.js&#39; &#x2F;&#x2F; 配置输出的文件名</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="实现webpack的实时打包构建"><a href="#实现webpack的实时打包构建" class="headerlink" title="实现webpack的实时打包构建"></a>实现webpack的实时打包构建</h2><ol><li>由于每次重新修改代码之后，都需要手动运行webpack打包的命令，比较麻烦，所以使用<code>webpack-dev-server</code>来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</li><li>运行<code>cnpm i webpack-dev-server --save-dev</code>安装到开发依赖</li><li>安装完成之后，在命令行直接运行<code>webpack-dev-server</code>来进行打包，发现报错，此时需要借助于<code>package.json</code>文件中的指令，来进行运行<code>webpack-dev-server</code>命令，在<code>scripts</code>节点下新增<code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>指令，发现可以进行实时打包，但是dist目录下并没有生成<code>bundle.js</code>文件，这是因为<code>webpack-dev-server</code>将打包好的文件放在了内存中<ul><li>把<code>bundle.js</code>放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快</li><li>这个时候访问webpack-dev-server启动的<code>http://localhost:8080/</code>网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的index首页，此时引用不到bundle.js文件，需要修改index.html中script的src属性为:<code>&lt;script src=&quot;../bundle.js&quot;&gt;&lt;/script&gt;</code></li><li>为了能在访问<code>http://localhost:8080/</code>的时候直接访问到index首页，可以使用<code>--contentBase src</code>指令来修改dev指令，指定启动的根目录：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --contentBase src&quot;</span><br></pre></td></tr></table></figure>同时修改index页面中script的src属性为<code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code></li></ul></li></ol><h2 id="使用html-webpack-plugin插件配置启动页面"><a href="#使用html-webpack-plugin插件配置启动页面" class="headerlink" title="使用html-webpack-plugin插件配置启动页面"></a>使用<code>html-webpack-plugin</code>插件配置启动页面</h2><p>由于使用<code>--contentBase</code>指令的过程比较繁琐，需要指定启动的目录，同时还需要修改index.html中script标签的src属性，所以推荐大家使用<code>html-webpack-plugin</code>插件配置启动页面.</p><ol><li>运行<code>cnpm i html-webpack-plugin --save-dev</code>安装到开发依赖</li><li>修改<code>webpack.config.js</code>配置文件如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 导入处理路径的模块</span><br><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line">&#x2F;&#x2F; 导入自动生成HTMl文件的插件</span><br><span class="line">var htmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: path.resolve(__dirname, &#39;src&#x2F;js&#x2F;main.js&#39;), &#x2F;&#x2F; 项目入口文件</span><br><span class="line">    output: &#123; &#x2F;&#x2F; 配置输出选项</span><br><span class="line">        path: path.resolve(__dirname, &#39;dist&#39;), &#x2F;&#x2F; 配置输出的路径</span><br><span class="line">        filename: &#39;bundle.js&#39; &#x2F;&#x2F; 配置输出的文件名</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[ &#x2F;&#x2F; 添加plugins节点配置插件</span><br><span class="line">        new htmlWebpackPlugin(&#123;</span><br><span class="line">            template:path.resolve(__dirname, &#39;src&#x2F;index.html&#39;),&#x2F;&#x2F;模板路径</span><br><span class="line">            filename:&#39;index.html&#39;&#x2F;&#x2F;自动生成的HTML文件的名称</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改<code>package.json</code>中<code>script</code>节点中的dev指令如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server&quot;</span><br></pre></td></tr></table></figure></li><li>将index.html中script标签注释掉，因为<code>html-webpack-plugin</code>插件会自动把bundle.js注入到index.html页面中！</li></ol><h2 id="实现自动打开浏览器、热更新和配置浏览器的默认端口号"><a href="#实现自动打开浏览器、热更新和配置浏览器的默认端口号" class="headerlink" title="实现自动打开浏览器、热更新和配置浏览器的默认端口号"></a>实现自动打开浏览器、热更新和配置浏览器的默认端口号</h2><p><strong>注意：热更新在JS中表现的不明显，可以从一会儿要讲到的CSS身上进行介绍说明！</strong></p><h3 id="方式1："><a href="#方式1：" class="headerlink" title="方式1："></a>方式1：</h3><ul><li>修改<code>package.json</code>的script节点如下，其中<code>--open</code>表示自动打开浏览器，<code>--port 4321</code>表示打开的端口号为4321，<code>--hot</code>表示启用浏览器热更新：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --hot --port 4321 --open&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="方式2："><a href="#方式2：" class="headerlink" title="方式2："></a>方式2：</h3><ol><li>修改<code>webpack.config.js</code>文件，新增<code>devServer</code>节点如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">        hot:true,</span><br><span class="line">        open:true,</span><br><span class="line">        port:4321</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>在头部引入<code>webpack</code>模块：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var webpack &#x3D; require(&#39;webpack&#39;);</span><br></pre></td></tr></table></figure></li><li>在<code>plugins</code>节点下新增：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new webpack.HotModuleReplacementPlugin()</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用webpack打包css文件"><a href="#使用webpack打包css文件" class="headerlink" title="使用webpack打包css文件"></a>使用webpack打包css文件</h2><ol><li>运行<code>cnpm i style-loader css-loader --save-dev</code></li><li>修改<code>webpack.config.js</code>这个配置文件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module: &#123; &#x2F;&#x2F; 用来配置第三方loader模块的</span><br><span class="line">        rules: [ &#x2F;&#x2F; 文件的匹配规则</span><br><span class="line">            &#123; test: &#x2F;\.css$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] &#125;&#x2F;&#x2F;处理css文件的规则</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>注意：<code>use</code>表示使用哪些模块来处理<code>test</code>所匹配到的文件；<code>use</code>中相关loader模块的调用顺序是从后向前调用的；</li></ol><h2 id="使用webpack打包less文件"><a href="#使用webpack打包less文件" class="headerlink" title="使用webpack打包less文件"></a>使用webpack打包less文件</h2><ol><li>运行<code>cnpm i less-loader less -D</code></li><li>修改<code>webpack.config.js</code>这个配置文件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test: &#x2F;\.less$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;less-loader&#39;] &#125;,</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用webpack打包sass文件"><a href="#使用webpack打包sass文件" class="headerlink" title="使用webpack打包sass文件"></a>使用webpack打包sass文件</h2><ol><li>运行<code>cnpm i sass-loader node-sass --save-dev</code></li><li>在<code>webpack.config.js</code>中添加处理sass文件的loader模块：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test: &#x2F;\.scss$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;sass-loader&#39;] &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用webpack处理css中的路径"><a href="#使用webpack处理css中的路径" class="headerlink" title="使用webpack处理css中的路径"></a>使用webpack处理css中的路径</h2><ol><li>运行<code>cnpm i url-loader file-loader --save-dev</code></li><li>在<code>webpack.config.js</code>中添加处理url路径的loader模块：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test: &#x2F;\.(png|jpg|gif)$&#x2F;, use: &#39;url-loader&#39; &#125;</span><br></pre></td></tr></table></figure></li><li>可以通过<code>limit</code>指定进行base64编码的图片大小；只有小于指定字节（byte）的图片才会进行base64编码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test: &#x2F;\.(png|jpg|gif)$&#x2F;, use: &#39;url-loader?limit&#x3D;43960&#39; &#125;,</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用babel处理高级JS语法"><a href="#使用babel处理高级JS语法" class="headerlink" title="使用babel处理高级JS语法"></a>使用babel处理高级JS语法</h2><ol><li>运行<code>cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev</code>安装babel的相关loader包</li><li>运行<code>cnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev</code>安装babel转换的语法</li><li>在<code>webpack.config.js</code>中添加相关loader模块，其中需要注意的是，一定要把<code>node_modules</code>文件夹添加到排除项：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test: &#x2F;\.js$&#x2F;, use: &#39;babel-loader&#39;, exclude: &#x2F;node_modules&#x2F; &#125;</span><br></pre></td></tr></table></figure></li><li>在项目根目录中添加<code>.babelrc</code>文件，并修改这个配置文件如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;:[&quot;es2015&quot;, &quot;stage-0&quot;],</span><br><span class="line">    &quot;plugins&quot;:[&quot;transform-runtime&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>注意：语法插件<code>babel-preset-es2015</code>可以更新为<code>babel-preset-env</code>，它包含了所有的ES相关的语法；</strong></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在网页中会引用哪些常见的静态资源？&quot;&gt;&lt;a href=&quot;#在网页中会引用哪些常见的静态资源？&quot; class=&quot;headerlink&quot; title=&quot;在网页中会引用哪些常见的静态资源？&quot;&gt;&lt;/a&gt;在网页中会引用哪些常见的静态资源？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JS&lt;u
      
    
    </summary>
    
    
      <category term="webpack" scheme="https://www.github.com/qyg2019/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://www.github.com/qyg2019/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>vue组件的使用</title>
    <link href="https://www.github.com/qyg2019/2020/01/05/%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.github.com/qyg2019/2020/01/05/%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-01-05T11:40:54.038Z</published>
    <updated>2019-12-28T14:35:49.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义Vue组件"><a href="#定义Vue组件" class="headerlink" title="定义Vue组件"></a>定义Vue组件</h2><p>什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；<br>组件化和模块化的不同：</p><ul><li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li><li>组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；</li></ul><h3 id="全局组件定义的三种方式"><a href="#全局组件定义的三种方式" class="headerlink" title="全局组件定义的三种方式"></a>全局组件定义的三种方式</h3><ol><li>使用 Vue.extend 配合 Vue.component 方法：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var login &#x3D; Vue.extend(&#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;登录&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line">    Vue.component(&#39;login&#39;, login);</span><br></pre></td></tr></table></figure><ol><li>直接使用 Vue.component 方法：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#39;register&#39;, &#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;注册&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ol><li>将模板字符串，定义到script标签种：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id&#x3D;&quot;tmpl&quot; type&#x3D;&quot;x-template&quot;&gt;</span><br><span class="line">      &lt;div&gt;&lt;a href&#x3D;&quot;#&quot;&gt;登录&lt;&#x2F;a&gt; | &lt;a href&#x3D;&quot;#&quot;&gt;注册&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>同时，需要使用 Vue.component 来定义组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#39;account&#39;, &#123;</span><br><span class="line">      template: &#39;#tmpl&#39;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！</p></blockquote><h3 id="组件中展示数据和响应事件"><a href="#组件中展示数据和响应事件" class="headerlink" title="组件中展示数据和响应事件"></a>组件中展示数据和响应事件</h3><ol><li>在组件中，<code>data</code>需要被定义为一个方法，例如：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#39;account&#39;, &#123;</span><br><span class="line">      template: &#39;#tmpl&#39;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          msg: &#39;大家好！&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">        login()&#123;</span><br><span class="line">          alert(&#39;点击了登录按钮&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ol><li>在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的<code>data</code>属性中的值，需要使用<code>this</code>来访问；</li></ol><h3 id="为什么组件中的data属性必须定义为一个方法并返回一个对象"><a href="#为什么组件中的data属性必须定义为一个方法并返回一个对象" class="headerlink" title="为什么组件中的data属性必须定义为一个方法并返回一个对象"></a>为什么组件中的data属性必须定义为一个方法并返回一个对象</h3><p>保持一份单独的拷贝。</p><h3 id="使用components属性定义局部子组件"><a href="#使用components属性定义局部子组件" class="headerlink" title="使用components属性定义局部子组件"></a>使用<code>components</code>属性定义局部子组件</h3><ol><li>组件实例定义方式：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components: &#123; &#x2F;&#x2F; 定义子组件</span><br><span class="line">        account: &#123; &#x2F;&#x2F; account 组件</span><br><span class="line">          template: &#39;&lt;div&gt;&lt;h1&gt;这是Account组件&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;&lt;login&gt;&lt;&#x2F;login&gt;&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; 在这里使用定义的子组件</span><br><span class="line">          components: &#123; &#x2F;&#x2F; 定义子组件的子组件</span><br><span class="line">            login: &#123; &#x2F;&#x2F; login 组件</span><br><span class="line">              template: &quot;&lt;h3&gt;这是登录组件&lt;&#x2F;h3&gt;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ol><li>引用组件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;account&gt;&lt;&#x2F;account&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="使用flag标识符结合v-if和v-else切换组件"><a href="#使用flag标识符结合v-if和v-else切换组件" class="headerlink" title="使用flag标识符结合v-if和v-else切换组件"></a>使用<code>flag</code>标识符结合<code>v-if</code>和<code>v-else</code>切换组件</h2><ol><li>页面结构：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;toggle&quot; @click&#x3D;&quot;flag&#x3D;!flag&quot;&gt;</span><br><span class="line">    &lt;my-com1 v-if&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com1&gt;</span><br><span class="line">    &lt;my-com2 v-else&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com2&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><ol><li>Vue实例定义：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&#39;myCom1&#39;, &#123;</span><br><span class="line">      template: &#39;&lt;h3&gt;奔波霸&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Vue.component(&#39;myCom2&#39;, &#123;</span><br><span class="line">      template: &#39;&lt;h3&gt;霸波奔&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        flag: true</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="使用-is属性来切换不同的子组件-并添加切换动画"><a href="#使用-is属性来切换不同的子组件-并添加切换动画" class="headerlink" title="使用:is属性来切换不同的子组件,并添加切换动画"></a>使用<code>:is</code>属性来切换不同的子组件,并添加切换动画</h2><ol><li>组件实例定义方式：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 登录组件</span><br><span class="line">  const login &#x3D; Vue.extend(&#123;</span><br><span class="line">    template: &#96;&lt;div&gt;</span><br><span class="line">      &lt;h3&gt;登录组件&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;&#96;</span><br><span class="line">  &#125;);</span><br><span class="line">  Vue.component(&#39;login&#39;, login);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 注册组件</span><br><span class="line">  const register &#x3D; Vue.extend(&#123;</span><br><span class="line">    template: &#96;&lt;div&gt;</span><br><span class="line">      &lt;h3&gt;注册组件&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;&#96;</span><br><span class="line">  &#125;);</span><br><span class="line">  Vue.component(&#39;register&#39;, register);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#app&#39;,</span><br><span class="line">    data: &#123; comName: &#39;login&#39; &#125;,</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ol><li>使用<code>component</code>标签，来引用组件，并通过<code>:is</code>属性来指定要加载的组件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;login&#39;&quot;&gt;登录&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;register&#39;&quot;&gt;注册&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;transition mode&#x3D;&quot;out-in&quot;&gt;</span><br><span class="line">    &lt;component :is&#x3D;&quot;comName&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class="line">  &lt;&#x2F;transition&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><ol><li>添加切换样式：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .v-enter,</span><br><span class="line">  .v-leave-to &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">    transform: translateX(30px);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .v-enter-active,</span><br><span class="line">  .v-leave-active &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    transition: all 0.3s ease;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h3&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h2><ol><li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        msg: &#39;这是父组件中的消息&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        son: &#123;</span><br><span class="line">          template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class="line">          props: [&#39;finfo&#39;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ol><li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h2><ol><li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li><li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br></pre></td></tr></table></figure><ol><li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 引用父组件 --&gt;</span><br><span class="line">    &lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 组件模板定义 --&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;x-template&quot; id&#x3D;&quot;son&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;向父组件传值&quot; @click&#x3D;&quot;sendMsg&quot; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 子组件的定义方式</span><br><span class="line">    Vue.component(&#39;son&#39;, &#123;</span><br><span class="line">      template: &#39;#son&#39;, &#x2F;&#x2F; 组件模板Id</span><br><span class="line">      methods: &#123;</span><br><span class="line">        sendMsg() &#123; &#x2F;&#x2F; 按钮的点击事件</span><br><span class="line">          this.$emit(&#39;func&#39;, &#39;OK&#39;); &#x2F;&#x2F; 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        getMsg(val)&#123; &#x2F;&#x2F; 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class="line">          alert(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义Vue组件&quot;&gt;&lt;a href=&quot;#定义Vue组件&quot; class=&quot;headerlink&quot; title=&quot;定义Vue组件&quot;&gt;&lt;/a&gt;定义Vue组件&lt;/h2&gt;&lt;p&gt;什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://www.github.com/qyg2019/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://www.github.com/qyg2019/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>图解MVVM与MVC</title>
    <link href="https://www.github.com/qyg2019/2020/01/05/%E5%9B%BE%E8%A7%A3MVVM%E4%B8%8EMVC/"/>
    <id>https://www.github.com/qyg2019/2020/01/05/%E5%9B%BE%E8%A7%A3MVVM%E4%B8%8EMVC/</id>
    <published>2020-01-05T11:40:54.038Z</published>
    <updated>2019-12-25T14:31:40.512Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MVC与MVVC"><a href="#MVC与MVVC" class="headerlink" title="MVC与MVVC"></a>MVC与MVVC</h3><h4 id="MVC-是一种使用-MVC（Model-View-Controller-模型-视图-控制器）设计创建-Web-应用程序的模式"><a href="#MVC-是一种使用-MVC（Model-View-Controller-模型-视图-控制器）设计创建-Web-应用程序的模式" class="headerlink" title="MVC 是一种使用 MVC（Model View Controller 模型-视图-控制器）设计创建 Web 应用程序的模式"></a>MVC 是一种使用 MVC（Model View Controller 模型-视图-控制器）设计创建 Web 应用程序的模式</h4><p>Model（模型）表示应用程序核心（比如数据库记录列表）。</p><p>View（视图）显示数据（数据库记录）。</p><p>Controller（控制器）处理输入（写入数据库记录）。</p><p>MVC 模式同时提供了对 HTML、CSS 和 JavaScript 的完全控制。<br>Model（模型）是应用程序中用于处理应用程序数据逻辑的部分。<br>　　通常模型对象负责在数据库中存取数据。<br>View（视图）是应用程序中处理数据显示的部分。<br>　　通常视图是依据模型数据创建的。<br>Controller（控制器）是应用程序中处理用户交互的部分。<br>　　通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</p><h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><p>Model 模型<br>模型是指代表真实状态内容的领域模型（面向对象），或指代表内容的数据访问层（以数据为中心）。</p><p>View 视图<br>就像在MVC和MVP模式中一样，视图是用户在屏幕上看到的结构、布局和外观（UI）。</p><p>ViewModel 视图模型<br>视图模型是暴露公共属性和命令的视图的抽象。MVVM没有MVC模式的控制器，也没有MVP模式的presenter，有的是一个绑定器。在视图模型中，绑定器在视图和数据绑定器之间进行通信。<br><img src="/img/MVC.png" alt="MVC"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;MVC与MVVC&quot;&gt;&lt;a href=&quot;#MVC与MVVC&quot; class=&quot;headerlink&quot; title=&quot;MVC与MVVC&quot;&gt;&lt;/a&gt;MVC与MVVC&lt;/h3&gt;&lt;h4 id=&quot;MVC-是一种使用-MVC（Model-View-Controller-模型-视图
      
    
    </summary>
    
    
      <category term="MVVM与MVC" scheme="https://www.github.com/qyg2019/categories/MVVM%E4%B8%8EMVC/"/>
    
    
      <category term="MVVM与MVC" scheme="https://www.github.com/qyg2019/tags/MVVM%E4%B8%8EMVC/"/>
    
  </entry>
  
  <entry>
    <title>配置Git</title>
    <link href="https://www.github.com/qyg2019/2020/01/05/%E9%85%8D%E7%BD%AEGit/"/>
    <id>https://www.github.com/qyg2019/2020/01/05/%E9%85%8D%E7%BD%AEGit/</id>
    <published>2020-01-05T11:40:54.038Z</published>
    <updated>2019-12-28T14:35:53.303Z</updated>
    
    <content type="html"><![CDATA[<p>为了设置Git中的配置值，需要使用config命令。</p><h3 id="告知Git你的身份"><a href="#告知Git你的身份" class="headerlink" title="告知Git你的身份"></a>告知Git你的身份</h3><p>这要根据用户名和电子邮件地址来确定，Git是一个源管理系统，它期望知道是谁在进行这些变更，以方便记录。</p><p>git config–global user.name <name></p><p>git config–global user.email <email address></p><p>实际上Git可以接受任何邮件地址，在设置时并不会对其进行验证，但是Git的一些高级功能可能会使用这个邮件地址，因此保证其正确性还是很有必要的。</p><h3 id="配置范围"><a href="#配置范围" class="headerlink" title="配置范围"></a>配置范围</h3><ol><li>system</li></ol><p>在系统级别配置意味着会被应用于指定机器上所有仓库。用config命令指定–system选项。</p><p>git config–system  <options></p><ol start="2"><li>global</li></ol><p>全局配置值适用于特定用户的所有仓库，这是用户适用最常见的级别。</p><p>git config–global  <options></p><ol start="3"><li>local</li></ol><p>该设置只用于一个仓库的上下文。</p><p>git config–local  <options></p><h3 id="设置的层次结构"><a href="#设置的层次结构" class="headerlink" title="设置的层次结构"></a>设置的层次结构</h3><p>首先会在本地仓库配置中查找，然后查找全局配置，最后查找系统配置。如果找到一个值，那么就是用这个值。 </p><ul><li><h4 id="查看配置值"><a href="#查看配置值" class="headerlink" title="查看配置值"></a>查看配置值</h4></li></ul><p>git config <setting></p><ul><li><h4 id="撤销配置值"><a href="#撤销配置值" class="headerlink" title="撤销配置值"></a>撤销配置值</h4></li></ul><p>git config –unset <options></p><ul><li><h4 id="列出配置值"><a href="#列出配置值" class="headerlink" title="列出配置值"></a>列出配置值</h4></li></ul><p>git config –list</p><p>包含但不限于本地，全局，系统，如果同时设置将会一起显示，为了避免混淆，可以指定范围。</p><p>git config –global –list</p><ul><li><h4 id="一次性配置"><a href="#一次性配置" class="headerlink" title="一次性配置"></a>一次性配置</h4></li></ul><p>git -c <setting>=<value>      类似于键值对的形式</p><p>​     </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了设置Git中的配置值，需要使用config命令。&lt;/p&gt;
&lt;h3 id=&quot;告知Git你的身份&quot;&gt;&lt;a href=&quot;#告知Git你的身份&quot; class=&quot;headerlink&quot; title=&quot;告知Git你的身份&quot;&gt;&lt;/a&gt;告知Git你的身份&lt;/h3&gt;&lt;p&gt;这要根据用户名和
      
    
    </summary>
    
    
      <category term="Git" scheme="https://www.github.com/qyg2019/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.github.com/qyg2019/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>vue动画</title>
    <link href="https://www.github.com/qyg2019/2020/01/05/animate/"/>
    <id>https://www.github.com/qyg2019/2020/01/05/animate/</id>
    <published>2020-01-05T11:40:54.022Z</published>
    <updated>2019-12-28T14:37:27.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue中的动画"><a href="#Vue中的动画" class="headerlink" title="Vue中的动画"></a>Vue中的动画</h2><p>为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；</p><p><img src="/img/transition.png" alt=""></p><h3 id="使用过渡类名"><a href="#使用过渡类名" class="headerlink" title="使用过渡类名"></a>使用过渡类名</h3><ol><li>HTML结构：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;动起来&quot; @click&#x3D;&quot;myAnimate&quot;&gt;</span><br><span class="line">    &lt;!-- 使用 transition 将需要过渡的元素包裹起来 --&gt;</span><br><span class="line">    &lt;transition name&#x3D;&quot;fade&quot;&gt;</span><br><span class="line">      &lt;div v-show&#x3D;&quot;show&quot;&gt;动画&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li>VM 实例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: false</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    myAnimate() &#123;</span><br><span class="line">      this.isshow &#x3D; !this.isshow;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>定义两组类样式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* 定义进入和离开时候的过渡状态 *&#x2F;</span><br><span class="line">    .fade-enter-active,</span><br><span class="line">    .fade-leave-active &#123;</span><br><span class="line">      transition: all 0.2s ease;</span><br><span class="line">      position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;* 定义进入过渡的开始状态 和 离开过渡的结束状态 *&#x2F;</span><br><span class="line">    .fade-enter,</span><br><span class="line">    .fade-leave-to &#123;</span><br><span class="line">      opacity: 0;</span><br><span class="line">      transform: translateX(100px);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用第三方-CSS-动画库"><a href="#使用第三方-CSS-动画库" class="headerlink" title="使用第三方 CSS 动画库"></a>使用第三方 CSS 动画库</h3><ol><li>导入动画类库：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;.&#x2F;lib&#x2F;animate.css&quot;&gt;</span><br></pre></td></tr></table></figure></li><li>定义 transition 及属性：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">enter-active-class&#x3D;&quot;fadeInRight&quot;</span><br><span class="line">    leave-active-class&#x3D;&quot;fadeOutRight&quot;</span><br><span class="line">    :duration&#x3D;&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;animated&quot; v-show&#x3D;&quot;isshow&quot;&gt;动画&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用动画钩子函数"><a href="#使用动画钩子函数" class="headerlink" title="使用动画钩子函数"></a>使用动画钩子函数</h3><ol><li>定义 transition 组件以及三个钩子函数：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;切换动画&quot; @click&#x3D;&quot;show &#x3D; !show&quot;&gt;</span><br><span class="line">    &lt;transition</span><br><span class="line">    @before-enter&#x3D;&quot;beforeEnter&quot;</span><br><span class="line">    @enter&#x3D;&quot;enter&quot;</span><br><span class="line">    @after-enter&#x3D;&quot;afterEnter&quot;&gt;</span><br><span class="line">      &lt;div v-if&#x3D;&quot;show&quot; class&#x3D;&quot;shows&quot;&gt;OK&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li>定义三个 methods 钩子方法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">        beforeEnter(el) &#123; &#x2F;&#x2F; 动画进入之前的回调</span><br><span class="line">          el.style.transform &#x3D; &#39;translateX(500px)&#39;;</span><br><span class="line">        &#125;,</span><br><span class="line">        enter(el, done) &#123; &#x2F;&#x2F; 动画进入完成时候的回调</span><br><span class="line">          el.offsetWidth;</span><br><span class="line">          el.style.transform &#x3D; &#39;translateX(0px)&#39;;</span><br><span class="line">          done();</span><br><span class="line">        &#125;,</span><br><span class="line">        afterEnter(el) &#123; &#x2F;&#x2F; 动画进入完成之后的回调</span><br><span class="line">          this.show &#x3D; !this.show;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li><li>定义动画过渡时长和样式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.shows&#123;</span><br><span class="line">      transition: all 0.4s ease;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="v-for-的列表过渡"><a href="#v-for-的列表过渡" class="headerlink" title="v-for 的列表过渡"></a>v-for 的列表过渡</h3><ol><li>定义过渡样式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .list-enter,</span><br><span class="line">    .list-leave-to &#123;</span><br><span class="line">      opacity: 0;</span><br><span class="line">      transform: translateY(10px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .list-enter-active,</span><br><span class="line">    .list-leave-active &#123;</span><br><span class="line">      transition: all 0.3s ease;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li><li>定义DOM结构，其中，需要使用 transition-group 组件把v-for循环的列表包裹起来：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;txt&quot; @keyup.enter&#x3D;&quot;add&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;transition-group tag&#x3D;&quot;ul&quot; name&#x3D;&quot;list&quot;&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;(item, i) in list&quot; :key&#x3D;&quot;i&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;transition-group&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li>定义 VM中的结构：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    txt: &#39;&#39;,</span><br><span class="line">    list: [1, 2, 3, 4]</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add() &#123;</span><br><span class="line">      this.list.push(this.txt);</span><br><span class="line">      this.txt &#x3D; &#39;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="列表的排序过渡"><a href="#列表的排序过渡" class="headerlink" title="列表的排序过渡"></a>列表的排序过渡</h3><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，<strong>还可以改变定位</strong>。要使用这个新功能只需了解新增的 <code>v-move</code> 特性，<strong>它会在元素的改变定位的过程中应用</strong>。</p><ul><li><code>v-move</code> 和 <code>v-leave-active</code> 结合使用，能够让列表的过渡更加平缓柔和：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.v-move&#123;</span><br><span class="line">  transition: all 0.8s ease;</span><br><span class="line">&#125;</span><br><span class="line">.v-leave-active&#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue中的动画&quot;&gt;&lt;a href=&quot;#Vue中的动画&quot; class=&quot;headerlink&quot; title=&quot;Vue中的动画&quot;&gt;&lt;/a&gt;Vue中的动画&lt;/h2&gt;&lt;p&gt;为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；&lt;/p&gt;
&lt;p&gt;&lt;img s
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://www.github.com/qyg2019/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://www.github.com/qyg2019/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>移动内容的核心Git命令</title>
    <link href="https://www.github.com/qyg2019/2020/01/05/git%E6%A0%B8%E5%BF%83%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.github.com/qyg2019/2020/01/05/git%E6%A0%B8%E5%BF%83%E5%91%BD%E4%BB%A4/</id>
    <published>2020-01-05T11:40:54.022Z</published>
    <updated>2019-12-26T08:35:54.616Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/2.png" alt="git"></p><table><thead><tr><th align="center">从</th><th align="center">到</th><th align="center">命令</th><th align="center">注解</th></tr></thead><tbody><tr><td align="center">工作目录</td><td align="center">暂存区域</td><td align="center">add</td><td align="center">暂存本地变更</td></tr><tr><td align="center">暂存区域</td><td align="center">本地仓库</td><td align="center">commit</td><td align="center">仅提交暂存区域内容</td></tr><tr><td align="center">本地仓库</td><td align="center">远程仓库</td><td align="center">push</td><td align="center">在推送时同步内容</td></tr><tr><td align="center">本地仓库</td><td align="center">工作目录</td><td align="center">checkout</td><td align="center">切换当前分支</td></tr><tr><td align="center">远程仓库</td><td align="center">本地环境</td><td align="center">clone</td><td align="center">创建本地仓库和工作目录</td></tr><tr><td align="center">远程仓库</td><td align="center">本地仓库</td><td align="center">fetch</td><td align="center">更新远程分支的引用</td></tr><tr><td align="center">远程仓库</td><td align="center">本地仓库和工作目录</td><td align="center">pull</td><td align="center">抓取合并到本地分支和工作目录</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/2.png&quot; alt=&quot;git&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;从&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;到&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;命令&lt;/th&gt;

      
    
    </summary>
    
    
      <category term="Git" scheme="https://www.github.com/qyg2019/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.github.com/qyg2019/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git升级模型</title>
    <link href="https://www.github.com/qyg2019/2020/01/05/git/"/>
    <id>https://www.github.com/qyg2019/2020/01/05/git/</id>
    <published>2020-01-05T11:40:54.022Z</published>
    <updated>2019-12-25T14:13:53.011Z</updated>
    
    <content type="html"><![CDATA[<h4 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h4><p>本地系统上的任何目录或目录树都可以成为Git仓库的工作目录。工作目录可以拥有形成一个整体工作区的任意数量的子目录。在将Git连接到本地目录树时，会创建一个仓库框架，也就是本地仓库（默认情况下本地仓库为.git）</p><p>可以通过–git-dir或者一个环境变量$GIT_DIR来重写git的默认位置。</p><hr><h4 id="暂存区域"><a href="#暂存区域" class="headerlink" title="暂存区域"></a>暂存区域</h4><p>一个在变更被提交到本地仓库之前暂存变更的地方，保存已经从工作目录升级了的任意内容的集合。</p><p>两种使用场景：</p><p>1.准备场景</p><p>用户在工作区中完成变更，将文件移动到暂存区中，支持任意力度，甚至可以一个一个文件升级。</p><p>2.修复场景</p><p>拉取仓库中最后一次提交，更新其内容，推送会前一次提交的位置。</p><p>3.处理合并冲突</p><p>将无法解决的冲突放入工作目录中，暂存那些被干净合并的文件，待冲突解决后，暂存区包含一组完整的解决冲突后的文件，提交到本地仓库。</p><p>可以绕过暂存区吗？</p><p>仅适用于Git已经在追踪的文件，这意味着文件首次被添加到Git时，必须经历暂存阶段。</p><hr><h4 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h4><p>本地环境上Git级别的最后一个部分，通过两种方式来创建：</p><p>1.远程仓库的一份克隆 </p><p>2.告知Git在本地初始化一个新环境</p><p>它是当前用户独占使用的一个源仓库，用户在对内容感到满意之前，都可以进行修改，之后可以将内容发送到远程仓库。如果工作目录被意外清除并且未同步到远程，那么内容将会丢失。如果其他人持续更新特定的远程仓库，那么从本地仓库将内容同步到远程仓库之间时间间隔越长，出现合并问题的概率越高。</p><hr><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><p>多个Git用户从各自本地仓库向上同步变更的地方。</p><ul><li>远程仓库是唯一的，对于多个项目而言，可以有许多远程仓库，但不会再服务器生成或使用远程仓库的多个副本</li><li>可以根据需要将远程仓库多次克隆到不同的本地仓库</li></ul><p><img src="/img/1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;工作目录&quot;&gt;&lt;a href=&quot;#工作目录&quot; class=&quot;headerlink&quot; title=&quot;工作目录&quot;&gt;&lt;/a&gt;工作目录&lt;/h4&gt;&lt;p&gt;本地系统上的任何目录或目录树都可以成为Git仓库的工作目录。工作目录可以拥有形成一个整体工作区的任意数量的子目录。在将Git
      
    
    </summary>
    
    
      <category term="Git" scheme="https://www.github.com/qyg2019/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.github.com/qyg2019/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>分布式版本控制系统Git常用命令浅谈</title>
    <link href="https://www.github.com/qyg2019/2020/01/05/git%E5%88%86%E5%B8%83%E5%BC%8F%E5%91%BD%E4%BB%A4%E6%B5%85%E8%B0%88/"/>
    <id>https://www.github.com/qyg2019/2020/01/05/git%E5%88%86%E5%B8%83%E5%BC%8F%E5%91%BD%E4%BB%A4%E6%B5%85%E8%B0%88/</id>
    <published>2020-01-05T11:40:54.022Z</published>
    <updated>2019-11-30T12:36:59.257Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是Git-Git下载地址"><a href="#什么是Git-Git下载地址" class="headerlink" title="什么是Git                                                                                                                   Git下载地址"></a>什么是Git                                                                                                                   <a href="https://git-scm.com/" target="_blank" rel="noopener">Git下载地址</a></h4><p>Git是目前世界上最先进的分布式版本控制系统,具有备份， 记录操作时间线，多端共享代码（代替各种云盘的功能），‘自动’合并的功能。Git是没有中心服务器的，每个人机器上都是一个完整的库，我们平时开发代码时的中央服务器其实和我们自己机器上的库内容基本是完全一样的。</p><h4 id="Git原理及基本操作"><a href="#Git原理及基本操作" class="headerlink" title="Git原理及基本操作"></a>Git原理及基本操作</h4><p><img src="/img/git.png" alt="git原理"></p><p>本地仓库分为工作区、缓冲区以及仓库,每个仓库可以简单理解成一个目录，这个目录里面的所有文件都通过Git来实现版本管理，Git都能跟踪并记录在该目录中发生的所有更新。</p><h5 id="安装好Git后，新建一个文件夹，单击右键gitbush-输入以下命令初始化一个本地仓库："><a href="#安装好Git后，新建一个文件夹，单击右键gitbush-输入以下命令初始化一个本地仓库：" class="headerlink" title="安装好Git后，新建一个文件夹，单击右键gitbush,输入以下命令初始化一个本地仓库："></a>安装好Git后，新建一个文件夹，单击右键gitbush,输入以下命令初始化一个本地仓库：</h5><p><img src="/img/init.png" alt="init"></p><p>可以看到出现了一个文件夹：                        <img src="/img/gits.png" alt="gits"></p><p>接下来就可以在这个文件夹中进行开发了。</p><p>一顿苦逼的开发之后……</p><h5 id="使用add命令将指定文件或全部文件推入缓冲区"><a href="#使用add命令将指定文件或全部文件推入缓冲区" class="headerlink" title="使用add命令将指定文件或全部文件推入缓冲区"></a>使用add命令将指定文件或全部文件推入缓冲区</h5><p>​                                                                         <img src="/img/add.png" alt="add"></p><p>​                                                                         <img src="/img/addbf.png" alt="add部分文件"></p><h5 id="使用commit命令推入本地仓库"><a href="#使用commit命令推入本地仓库" class="headerlink" title="使用commit命令推入本地仓库"></a>使用commit命令推入本地仓库</h5><p>​                                                                          <img src="/img/commit.png" alt="commit"></p><p>  至此一个版本开发完毕，当然git还提供更多命令来供用户操作，一起来了解下吧！</p><p>   git status： 查看仓库当前的状态 </p><p>​   git diff +文件名：查看文件具体修改了哪里</p><p>​   git log：查看最近到最远提交到仓库的文件信息(一串数字为特有的时间序列id 可以根据它进行版本前后回滚)</p><p>   git reset –hard HEAD^：回退到上一次 commit的时候</p><p>   git reset –hard bdeacd: 版本前进 只能根据 id进行前进（id只写出前六位就好了）</p><p>   git reflog：查看每次操作仓库内的信息（commit）这样的话当黑窗口没了的时候，也可以查询具体操作信息，</p><p>   进行版本回退或者前进!</p><p>   git checkout – read.txt: 工作区恢复到最近一次的commit或者add</p><p>   git rm +文件名: 删除某一个文件</p><h5 id="需要注意的是在开发尽量不要在master分支上进行，在开发完成后可以和master分支merge，因此会用到下列命令。"><a href="#需要注意的是在开发尽量不要在master分支上进行，在开发完成后可以和master分支merge，因此会用到下列命令。" class="headerlink" title="需要注意的是在开发尽量不要在master分支上进行，在开发完成后可以和master分支merge，因此会用到下列命令。"></a>需要注意的是在开发尽量不要在master分支上进行，在开发完成后可以和master分支merge，因此会用到下列命令。</h5><p>   git branch dev: 创建dev分支</p><p>   git checkout dev： 切换到dev分支上开发</p><p>   git branch：查看所有分支</p><p>   git branch -d dev：删除分支 （-D 强制删除）</p><p>   git merge dev: 合并分支</p><h5 id="在实际的开发过程中往往是多人协作开发，这就需要把本地仓库和github关联，进行以下操作："><a href="#在实际的开发过程中往往是多人协作开发，这就需要把本地仓库和github关联，进行以下操作：" class="headerlink" title="在实际的开发过程中往往是多人协作开发，这就需要把本地仓库和github关联，进行以下操作："></a>在实际的开发过程中往往是多人协作开发，这就需要把本地仓库和<a href="https://github.com/" target="_blank" rel="noopener">github</a>关联，进行以下操作：</h5><h5 id="1-首先要再github上创建远程仓库用来存储项目，和本地电脑达成信任关系（ssh）"><a href="#1-首先要再github上创建远程仓库用来存储项目，和本地电脑达成信任关系（ssh）" class="headerlink" title="1. 首先要再github上创建远程仓库用来存储项目，和本地电脑达成信任关系（ssh）"></a>1. 首先要再github上创建远程仓库用来存储项目，和本地电脑达成信任关系（ssh）</h5><h5 id="2-可以通过git-clone远程仓库（git-clone-git-github-com-HustCst-duyiApp-git）或者通过git-remote-add-origin-git-github-com-HustCst-duyiApp-git，是本地仓库和远程仓库相关联，git-pull-origin-master，本地才有master分支！"><a href="#2-可以通过git-clone远程仓库（git-clone-git-github-com-HustCst-duyiApp-git）或者通过git-remote-add-origin-git-github-com-HustCst-duyiApp-git，是本地仓库和远程仓库相关联，git-pull-origin-master，本地才有master分支！" class="headerlink" title="2.可以通过git clone远程仓库（git clone git@github.com:HustCst/duyiApp.git）或者通过git remote add origin git@github.com:HustCst/duyiApp.git，是本地仓库和远程仓库相关联，git pull origin master，本地才有master分支！"></a>2.可以通过git clone远程仓库（git clone <a href="mailto:git@github.com">git@github.com</a>:HustCst/duyiApp.git）或者通过git remote add origin <a href="mailto:git@github.com">git@github.com</a>:HustCst/duyiApp.git，是本地仓库和远程仓库相关联，git pull origin master，本地才有master分支！</h5><h5 id="3-之后再本地master分支上的代码上传到-远程仓库上的master分支-第一次上传使用-git-push-–u-origin-master，之后可以简化命令，把-u去掉。（如果仓库里本身就有文件，但是我们不要了，而是想把远程的代码上传上去，我们可以通过-git-push-origin-master-–f-强行让master分支上的本地文件覆盖远程master分支上的文件）"><a href="#3-之后再本地master分支上的代码上传到-远程仓库上的master分支-第一次上传使用-git-push-–u-origin-master，之后可以简化命令，把-u去掉。（如果仓库里本身就有文件，但是我们不要了，而是想把远程的代码上传上去，我们可以通过-git-push-origin-master-–f-强行让master分支上的本地文件覆盖远程master分支上的文件）" class="headerlink" title="3.之后再本地master分支上的代码上传到 远程仓库上的master分支 第一次上传使用 git push –u origin master，之后可以简化命令，把-u去掉。（如果仓库里本身就有文件，但是我们不要了，而是想把远程的代码上传上去，我们可以通过 git push origin master –f 强行让master分支上的本地文件覆盖远程master分支上的文件）"></a>3.之后再本地master分支上的代码上传到 远程仓库上的master分支 第一次上传使用 git push –u origin master，之后可以简化命令，把-u去掉。（如果仓库里本身就有文件，但是我们不要了，而是想把远程的代码上传上去，我们可以通过 git push origin master –f 强行让master分支上的本地文件覆盖远程master分支上的文件）</h5><h2 id="ps"><a href="#ps" class="headerlink" title="ps:"></a>ps:</h2><p><strong>切记不要在本地master分支上开发，在其他分支如dev上开发后，合并到master上直接上传到 远程的 非master分支如dev分支，通过 git push origin master:dev; 之后项目参与者可以 new pull request 进行代码比对和阅读，项目管理人员在同意的情况下，会把远程dev分支上的东西合并到远程master分支上。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是Git-Git下载地址&quot;&gt;&lt;a href=&quot;#什么是Git-Git下载地址&quot; class=&quot;headerlink&quot; title=&quot;什么是Git                                                          
      
    
    </summary>
    
    
      <category term="Git" scheme="https://www.github.com/qyg2019/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.github.com/qyg2019/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>vue-resource的使用</title>
    <link href="https://www.github.com/qyg2019/2020/01/05/vue-resource/"/>
    <id>https://www.github.com/qyg2019/2020/01/05/vue-resource/</id>
    <published>2020-01-05T11:40:54.022Z</published>
    <updated>2019-12-28T14:35:01.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-resource的使用"><a href="#vue-resource的使用" class="headerlink" title="vue-resource的使用"></a>vue-resource的使用</h3><hr><p>Vue 要实现异步加载需要使用到 vue-resource 库。</p><p>Vue.js 2.0 版本推荐使用 <a href="https://www.runoob.com/vue2/vuejs-ajax-axios.html" target="_blank" rel="noopener">axios</a> 来完成 ajax 请求。</p><h4 id="vue-resource-的配置步骤："><a href="#vue-resource-的配置步骤：" class="headerlink" title="vue-resource 的配置步骤："></a>vue-resource 的配置步骤：</h4><ul><li>直接在页面中，通过<code>script</code>标签，引入 <code>vue-resource</code> 的脚本文件；</li><li>注意：引用的先后顺序是：先引用 <code>Vue</code> 的脚本文件，再引用 <code>vue-resource</code> 的脚本文件；</li></ul><h4 id="常见的请求：get-post-jsonp"><a href="#常见的请求：get-post-jsonp" class="headerlink" title="常见的请求：get post jsonp"></a>常见的请求：get post jsonp</h4><p>​                                                                            get请求</p><p> this.$http.get(url).then( function(res){}, function(err){} )</p><p><img src="/img/get.png" alt=""></p><p>​                                                                            post请求</p><p>this.$http.post( url, {}, { emulateJSON: true }).then( function(res){}, function(err){} )</p><p><img src="/img/post.png" alt=""></p><p>​                                                                             jsonp请求</p><p>this.$http.jsonp(url).then( function(res){}, function(err){} )</p><p><img src="/img/jsonp.png" alt=""></p><h4 id="注：post-发送数据到后端，需要第三个参数-emulateJSON-true-。"><a href="#注：post-发送数据到后端，需要第三个参数-emulateJSON-true-。" class="headerlink" title="注：post 发送数据到后端，需要第三个参数 {emulateJSON:true}  。"></a>注：post 发送数据到后端，需要第三个参数 {emulateJSON:true}  。</h4><p>vue-resource共提供七种请求方法</p><p><img src="/img/rem.png" alt=""></p><p>参数说明：</p><p>​                                                                            <img src="/img/option.png" alt=""></p><p>处理响应的方法：</p><p><img src="/img/deal.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue-resource的使用&quot;&gt;&lt;a href=&quot;#vue-resource的使用&quot; class=&quot;headerlink&quot; title=&quot;vue-resource的使用&quot;&gt;&lt;/a&gt;vue-resource的使用&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;Vue 要实现异步加载需要
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://www.github.com/qyg2019/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://www.github.com/qyg2019/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue指令学习</title>
    <link href="https://www.github.com/qyg2019/2020/01/05/vue%E6%8C%87%E4%BB%A4/"/>
    <id>https://www.github.com/qyg2019/2020/01/05/vue%E6%8C%87%E4%BB%A4/</id>
    <published>2020-01-05T11:40:54.022Z</published>
    <updated>2019-12-28T14:35:17.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h2><ul><li><p>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。</p><ul><li>node 中的 express；</li></ul></li><li><p>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。</p><ul><li><ol><li>从Jquery 切换到 Zepto</li></ol></li><li><ol start="2"><li>从 EJS 切换到 art-template</li></ol></li></ul></li></ul><h2 id="Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别"><a href="#Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别" class="headerlink" title="Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别"></a>Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别</h2><ul><li><p>MVC 是后端的分层开发概念；</p></li><li><p>MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</p></li><li><p>为什么有了MVC还要有MVVM</p></li></ul><h2 id="Vue之-基本的代码结构和插值表达式、v-cloak"><a href="#Vue之-基本的代码结构和插值表达式、v-cloak" class="headerlink" title="Vue之 - 基本的代码结构和插值表达式、v-cloak"></a>Vue之 - <code>基本的代码结构</code>和<code>插值表达式</code>、<code>v-cloak</code></h2><h2 id="Vue指令之v-text和v-html"><a href="#Vue指令之v-text和v-html" class="headerlink" title="Vue指令之v-text和v-html"></a>Vue指令之<code>v-text</code>和<code>v-html</code></h2><p>v-text会覆盖元素中原本的内容，但是 插值表达式  只会替换自己的这个占位符，不会把 整个元素的内容清空</p><h2 id="Vue指令之v-bind的三种用法"><a href="#Vue指令之v-bind的三种用法" class="headerlink" title="Vue指令之v-bind的三种用法"></a>Vue指令之<code>v-bind</code>的三种用法</h2><ol><li><p>直接使用指令<code>v-bind</code></p></li><li><p>使用简化指令<code>:</code></p></li><li><p>在绑定的时候，拼接绑定内容：<code>:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot;</code></p></li></ol><h2 id="Vue指令之v-on的缩写和事件修饰符"><a href="#Vue指令之v-on的缩写和事件修饰符" class="headerlink" title="Vue指令之v-on的缩写和事件修饰符"></a>Vue指令之<code>v-on的缩写</code>和<code>事件修饰符</code></h2><h3 id="事件修饰符："><a href="#事件修饰符：" class="headerlink" title="事件修饰符："></a>事件修饰符：</h3><ul><li><p>.stop       阻止冒泡</p></li><li><p>.prevent    阻止默认事件</p></li><li><p>.capture    添加事件侦听器时使用事件捕获模式</p></li><li><p>.self       只当事件在该元素本身（比如不是子元素）触发时触发回调</p></li><li><p>.once       事件只触发一次</p></li></ul><h2 id="Vue指令之v-model和双向数据绑定"><a href="#Vue指令之v-model和双向数据绑定" class="headerlink" title="Vue指令之v-model和双向数据绑定"></a>Vue指令之<code>v-model</code>和<code>双向数据绑定</code></h2><p>v-bind 只能实现数据的单向绑定，从 M 自动绑定到 V， 无法实现数据的双向绑定</p><p>使用  v-model 指令，可以实现 表单元素和 Model 中数据的双向数据绑定</p><p>注意： v-model 只能运用在 表单元素中</p><h2 id="在Vue中使用样式"><a href="#在Vue中使用样式" class="headerlink" title="在Vue中使用样式"></a>在Vue中使用样式</h2><h3 id="使用class样式"><a href="#使用class样式" class="headerlink" title="使用class样式"></a>使用class样式</h3><ol><li><p>数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>数组中使用三元表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, isactive?&#39;active&#39;:&#39;&#39;]&quot;&gt;这是H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>数组中嵌套对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, &#123;&#39;active&#39;: isactive&#125;]&quot;&gt;这是H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>直接使用对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :class&#x3D;&quot;&#123;red:true, italic:true, active:true, thin:true&#125;&quot;&gt;这是H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用内联样式"><a href="#使用内联样式" class="headerlink" title="使用内联样式"></a>使用内联样式</h3><ol><li><p>直接在元素上通过 <code>:style</code> 的形式，书写样式对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style&#x3D;&quot;&#123;color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;&#125;&quot;&gt;这是的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>将样式对象，定义到 <code>data</code> 中，并直接引用到 <code>:style</code> 中</p><ul><li>在data上定义样式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style&#x3D;&quot;h1StyleObj&quot;&gt;这是H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在 <code>:style</code> 中通过数组，引用多个 <code>data</code> 上的样式对象</p><ul><li>在data上定义样式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;,</span><br><span class="line">        h1StyleObj2: &#123; fontStyle: &#39;italic&#39; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style&#x3D;&quot;[h1StyleObj, h1StyleObj2]&quot;&gt;这是H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Vue指令之v-for和key属性"><a href="#Vue指令之v-for和key属性" class="headerlink" title="Vue指令之v-for和key属性"></a>Vue指令之<code>v-for</code>和<code>key</code>属性</h2><ol><li>迭代数组</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for&#x3D;&quot;(item, i) in list&quot;&gt;索引：&#123;&#123;i&#125;&#125; --- 姓名：&#123;&#123;item.name&#125;&#125; --- 年龄：&#123;&#123;item.age&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>迭代对象中的属性</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 循环遍历对象身上的属性 --&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div v-for&#x3D;&quot;(val, key, i) in userInfo&quot;&gt;&#123;&#123;val&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;i&#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>迭代数字</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;p v-for&#x3D;&quot;i in 10&quot;&gt;这是第 &#123;&#123;i&#125;&#125; 个P标签&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><blockquote><p>2.2.0+ 的版本里，<strong>当在组件中使用</strong> v-for 时，key 现在是必须的。</p></blockquote><p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “<strong>就地复用</strong>” 策略。如果数据项的顺序被改变，Vue将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</p><p>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p><h2 id="Vue指令之v-if和v-show"><a href="#Vue指令之v-if和v-show" class="headerlink" title="Vue指令之v-if和v-show"></a>Vue指令之<code>v-if</code>和<code>v-show</code></h2><p>v-if 的特点：每次都会重新删除或创建元素</p><p>v-show 的特点： 每次不会重新进行DOM的删除和创建操作，只是切换了元素的 display:none 样式</p><p>v-if 有较高的切换性能消耗<br>v-show 有较高的初始渲染消耗</p><blockquote><p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;框架和库的区别&quot;&gt;&lt;a href=&quot;#框架和库的区别&quot; class=&quot;headerlink&quot; title=&quot;框架和库的区别&quot;&gt;&lt;/a&gt;框架和库的区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://www.github.com/qyg2019/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://www.github.com/qyg2019/tags/Vue/"/>
    
  </entry>
  
</feed>
