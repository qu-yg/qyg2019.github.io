<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yg.qu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.github.com/qyg2019/"/>
  <updated>2019-12-16T14:35:17.967Z</updated>
  <id>https://www.github.com/qyg2019/</id>
  
  <author>
    <name>屈永国</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VUE实例的生命周期</title>
    <link href="https://www.github.com/qyg2019/2019/12/16/%E6%9C%AA%E5%91%BD%E5%90%8D/"/>
    <id>https://www.github.com/qyg2019/2019/12/16/%E6%9C%AA%E5%91%BD%E5%90%8D/</id>
    <published>2019-12-16T11:22:26.274Z</published>
    <updated>2019-12-16T14:35:17.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="VUE实例的生命周期"><a href="#VUE实例的生命周期" class="headerlink" title="VUE实例的生命周期"></a>VUE实例的生命周期</h3><hr><ul><li><p>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</p></li><li><p><a href="https://cn.vuejs.org/v2/api/#选项-生命周期钩子" target="_blank" rel="noopener">生命周期钩子</a>：就是生命周期事件的别名而已；</p></li><li><p>生命周期钩子 = 生命周期函数 = 生命周期事件</p></li></ul><h4 id="主要的生命周期函数分类："><a href="#主要的生命周期函数分类：" class="headerlink" title="主要的生命周期函数分类："></a>主要的生命周期函数分类：</h4><ul><li><p>创建期间的生命周期函数：</p><ul><li><p>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</p><ul><li><p>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</p></li><li><p>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</p></li><li><p>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</p></li></ul></li></ul></li></ul><ul><li><p>运行期间的生命周期函数：</p><ul><li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点<ul><li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li></ul></li></ul></li></ul><ul><li>销毁期间的生命周期函数：<ul><li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。<ul><li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul></li></ul></li></ul><p><img src="/img/lifecycle.png" alt="生命周期"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;VUE实例的生命周期&quot;&gt;&lt;a href=&quot;#VUE实例的生命周期&quot; class=&quot;headerlink&quot; title=&quot;VUE实例的生命周期&quot;&gt;&lt;/a&gt;VUE实例的生命周期&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;什么是生命周期：从Vue实例创建、运行、到销毁期
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://www.github.com/qyg2019/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://www.github.com/qyg2019/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>配置Git</title>
    <link href="https://www.github.com/qyg2019/2019/12/15/%E9%85%8D%E7%BD%AEGit/"/>
    <id>https://www.github.com/qyg2019/2019/12/15/%E9%85%8D%E7%BD%AEGit/</id>
    <published>2019-12-15T11:34:00.459Z</published>
    <updated>2019-12-15T12:21:24.607Z</updated>
    
    <content type="html"><![CDATA[<p>为了设置Git中的配置值，需要使用config命令。</p><h3 id="告知Git你的身份"><a href="#告知Git你的身份" class="headerlink" title="告知Git你的身份"></a>告知Git你的身份</h3><p>这要根据用户名和电子邮件地址来确定，Git是一个源管理系统，它期望知道是谁在进行这些变更，以方便记录。</p><p>git config–global user.name <name></p><p>git config–global user.email <email address></p><p>实际上Git可以接受任何邮件地址，在设置时并不会对其进行验证，但是Git的一些高级功能可能会使用这个邮件地址，因此保证其正确性还是很有必要的。</p><h3 id="配置范围"><a href="#配置范围" class="headerlink" title="配置范围"></a>配置范围</h3><ol><li>system</li></ol><p>在系统级别配置意味着会被应用于指定机器上所有仓库。用config命令指定–system选项。</p><p>git config–system  <options></p><ol start="2"><li>global</li></ol><p>全局配置值适用于特定用户的所有仓库，这是用户适用最常见的级别。</p><p>git config–global  <options></p><ol start="3"><li>local</li></ol><p>该设置只用于一个仓库的上下文。</p><p>git config–local  <options></p><h3 id="设置的层次结构"><a href="#设置的层次结构" class="headerlink" title="设置的层次结构"></a>设置的层次结构</h3><p>首先会在本地仓库配置中查找，然后查找全局配置，最后查找系统配置。如果找到一个值，那么就是用这个值。 </p><ul><li><h4 id="查看配置值"><a href="#查看配置值" class="headerlink" title="查看配置值"></a>查看配置值</h4></li></ul><p>git config <setting></p><ul><li><h4 id="撤销配置值"><a href="#撤销配置值" class="headerlink" title="撤销配置值"></a>撤销配置值</h4></li></ul><p>git config –unset <options></p><ul><li><h4 id="列出配置值"><a href="#列出配置值" class="headerlink" title="列出配置值"></a>列出配置值</h4></li></ul><p>git config –list</p><p>包含但不限于本地，全局，系统，如果同时设置将会一起显示，为了避免混淆，可以指定范围。</p><p>git config –global –list</p><ul><li><h4 id="一次性配置"><a href="#一次性配置" class="headerlink" title="一次性配置"></a>一次性配置</h4></li></ul><p>git -c <setting>=<value>      类似于键值对的形式</p><p>​     </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了设置Git中的配置值，需要使用config命令。&lt;/p&gt;
&lt;h3 id=&quot;告知Git你的身份&quot;&gt;&lt;a href=&quot;#告知Git你的身份&quot; class=&quot;headerlink&quot; title=&quot;告知Git你的身份&quot;&gt;&lt;/a&gt;告知Git你的身份&lt;/h3&gt;&lt;p&gt;这要根据用户名和
      
    
    </summary>
    
    
      <category term="Git" scheme="https://www.github.com/qyg2019/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.github.com/qyg2019/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>移动内容的核心Git命令</title>
    <link href="https://www.github.com/qyg2019/2019/12/13/git%E6%A0%B8%E5%BF%83%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.github.com/qyg2019/2019/12/13/git%E6%A0%B8%E5%BF%83%E5%91%BD%E4%BB%A4/</id>
    <published>2019-12-13T12:31:28.949Z</published>
    <updated>2019-12-13T12:50:21.854Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/2.png" alt="git"></p><table><thead><tr><th align="center">从</th><th align="center">到</th><th align="center">命令</th><th align="center">注解</th></tr></thead><tbody><tr><td align="center">工作目录</td><td align="center">暂存区域</td><td align="center">add</td><td align="center">暂存本地变更</td></tr><tr><td align="center">暂存区域</td><td align="center">本地仓库</td><td align="center">commit</td><td align="center">仅提交暂存区域内容</td></tr><tr><td align="center">本地仓库</td><td align="center">远程仓库</td><td align="center">push</td><td align="center">在推送时同步内容</td></tr><tr><td align="center">本地仓库</td><td align="center">工作目录</td><td align="center">checkout</td><td align="center">切换当前分支</td></tr><tr><td align="center">远程仓库</td><td align="center">本地环境</td><td align="center">clone</td><td align="center">创建本地仓库和工作目录</td></tr><tr><td align="center">远程仓库</td><td align="center">本地仓库</td><td align="center">fetch</td><td align="center">更新远程分支的引用</td></tr><tr><td align="center">远程仓库</td><td align="center">本地仓库和工作目录</td><td align="center">pull</td><td align="center">抓取合并到本地分支和工作目录</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/2.png&quot; alt=&quot;git&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;从&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;到&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;命令&lt;/th&gt;

      
    
    </summary>
    
    
      <category term="Git" scheme="https://www.github.com/qyg2019/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.github.com/qyg2019/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git升级模型</title>
    <link href="https://www.github.com/qyg2019/2019/12/13/git/"/>
    <id>https://www.github.com/qyg2019/2019/12/13/git/</id>
    <published>2019-12-13T09:09:53.859Z</published>
    <updated>2019-12-13T12:05:02.809Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/1.png" alt=""></p><h4 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h4><p>本地系统上的任何目录或目录树都可以成为Git仓库的工作目录。工作目录可以拥有形成一个整体工作区的任意数量的子目录。在将Git连接到本地目录树时，会创建一个仓库框架，也就是本地仓库（默认情况下本地仓库为.git）</p><p>可以通过–git-dir或者一个环境变量$GIT_DIR来重写git的默认位置。</p><hr><h4 id="暂存区域"><a href="#暂存区域" class="headerlink" title="暂存区域"></a>暂存区域</h4><p>一个在变更被提交到本地仓库之前暂存变更的地方，保存已经从工作目录升级了的任意内容的集合。</p><p>两种使用场景：</p><p>1.准备场景</p><p>用户在工作区中完成变更，将文件移动到暂存区中，支持任意力度，甚至可以一个一个文件升级。</p><p>2.修复场景</p><p>拉取仓库中最后一次提交，更新其内容，推送会前一次提交的位置。</p><p>3.处理合并冲突</p><p>将无法解决的冲突放入工作目录中，暂存那些被干净合并的文件，待冲突解决后，暂存区包含一组完整的解决冲突后的文件，提交到本地仓库。</p><p>可以绕过暂存区吗？</p><p>仅适用于Git已经在追踪的文件，这意味着文件首次被添加到Git时，必须经历暂存阶段。</p><hr><h4 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h4><p>本地环境上Git级别的最后一个部分，通过两种方式来创建：</p><p>1.远程仓库的一份克隆 </p><p>2.告知Git在本地初始化一个新环境</p><p>它是当前用户独占使用的一个源仓库，用户在对内容感到满意之前，都可以进行修改，之后可以将内容发送到远程仓库。如果工作目录被意外清除并且未同步到远程，那么内容将会丢失。如果其他人持续更新特定的远程仓库，那么从本地仓库将内容同步到远程仓库之间时间间隔越长，出现合并问题的概率越高。</p><hr><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><p>多个Git用户从各自本地仓库向上同步变更的地方。</p><ul><li>远程仓库是唯一的，对于多个项目而言，可以有许多远程仓库，但不会再服务器生成或使用远程仓库的多个副本</li><li>可以根据需要将远程仓库多次克隆到不同的本地仓库</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;工作目录&quot;&gt;&lt;a href=&quot;#工作目录&quot; class=&quot;headerlink&quot; title=&quot;工作目录&quot;&gt;&lt;/a&gt;工作目录&lt;/h4&gt;&lt;p&gt;本地系统上的任何目录或目录树都可以成为Git仓库的
      
    
    </summary>
    
    
      <category term="Git" scheme="https://www.github.com/qyg2019/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.github.com/qyg2019/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>图解MVVM与MVC</title>
    <link href="https://www.github.com/qyg2019/2019/12/11/%E5%9B%BE%E8%A7%A3MVVM%E4%B8%8EMVC/"/>
    <id>https://www.github.com/qyg2019/2019/12/11/%E5%9B%BE%E8%A7%A3MVVM%E4%B8%8EMVC/</id>
    <published>2019-12-11T13:29:58.626Z</published>
    <updated>2019-12-11T13:31:58.254Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/MVC.png" alt="MVC"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/MVC.png&quot; alt=&quot;MVC&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="MVVM与MVC" scheme="https://www.github.com/qyg2019/categories/MVVM%E4%B8%8EMVC/"/>
    
    
      <category term="MVVM与MVC" scheme="https://www.github.com/qyg2019/tags/MVVM%E4%B8%8EMVC/"/>
    
  </entry>
  
  <entry>
    <title>Vue指令学习</title>
    <link href="https://www.github.com/qyg2019/2019/12/11/day1/"/>
    <id>https://www.github.com/qyg2019/2019/12/11/day1/</id>
    <published>2019-12-11T11:34:58.773Z</published>
    <updated>2019-12-11T13:23:51.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h2><ul><li><p>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。</p><ul><li>node 中的 express；</li></ul></li><li><p>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。</p><ul><li><ol><li>从Jquery 切换到 Zepto</li></ol></li><li><ol start="2"><li>从 EJS 切换到 art-template</li></ol></li></ul></li></ul><h2 id="Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别"><a href="#Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别" class="headerlink" title="Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别"></a>Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别</h2><ul><li><p>MVC 是后端的分层开发概念；</p></li><li><p>MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</p></li><li><p>为什么有了MVC还要有MVVM</p></li></ul><h2 id="Vue之-基本的代码结构和插值表达式、v-cloak"><a href="#Vue之-基本的代码结构和插值表达式、v-cloak" class="headerlink" title="Vue之 - 基本的代码结构和插值表达式、v-cloak"></a>Vue之 - <code>基本的代码结构</code>和<code>插值表达式</code>、<code>v-cloak</code></h2><h2 id="Vue指令之v-text和v-html"><a href="#Vue指令之v-text和v-html" class="headerlink" title="Vue指令之v-text和v-html"></a>Vue指令之<code>v-text</code>和<code>v-html</code></h2><p>v-text会覆盖元素中原本的内容，但是 插值表达式  只会替换自己的这个占位符，不会把 整个元素的内容清空</p><h2 id="Vue指令之v-bind的三种用法"><a href="#Vue指令之v-bind的三种用法" class="headerlink" title="Vue指令之v-bind的三种用法"></a>Vue指令之<code>v-bind</code>的三种用法</h2><ol><li><p>直接使用指令<code>v-bind</code></p></li><li><p>使用简化指令<code>:</code></p></li><li><p>在绑定的时候，拼接绑定内容：<code>:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot;</code></p></li></ol><h2 id="Vue指令之v-on的缩写和事件修饰符"><a href="#Vue指令之v-on的缩写和事件修饰符" class="headerlink" title="Vue指令之v-on的缩写和事件修饰符"></a>Vue指令之<code>v-on的缩写</code>和<code>事件修饰符</code></h2><h3 id="事件修饰符："><a href="#事件修饰符：" class="headerlink" title="事件修饰符："></a>事件修饰符：</h3><ul><li><p>.stop       阻止冒泡</p></li><li><p>.prevent    阻止默认事件</p></li><li><p>.capture    添加事件侦听器时使用事件捕获模式</p></li><li><p>.self       只当事件在该元素本身（比如不是子元素）触发时触发回调</p></li><li><p>.once       事件只触发一次</p></li></ul><h2 id="Vue指令之v-model和双向数据绑定"><a href="#Vue指令之v-model和双向数据绑定" class="headerlink" title="Vue指令之v-model和双向数据绑定"></a>Vue指令之<code>v-model</code>和<code>双向数据绑定</code></h2><p>v-bind 只能实现数据的单向绑定，从 M 自动绑定到 V， 无法实现数据的双向绑定</p><p>使用  v-model 指令，可以实现 表单元素和 Model 中数据的双向数据绑定</p><p>注意： v-model 只能运用在 表单元素中</p><h2 id="在Vue中使用样式"><a href="#在Vue中使用样式" class="headerlink" title="在Vue中使用样式"></a>在Vue中使用样式</h2><h3 id="使用class样式"><a href="#使用class样式" class="headerlink" title="使用class样式"></a>使用class样式</h3><ol><li><p>数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span></pre></td></tr></table></figure></li><li><p>数组中使用三元表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, isactive?&#39;active&#39;:&#39;&#39;]&quot;&gt;这是H1&lt;&#x2F;h1&gt;</span></pre></td></tr></table></figure></li><li><p>数组中嵌套对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, &#123;&#39;active&#39;: isactive&#125;]&quot;&gt;这是H1&lt;&#x2F;h1&gt;</span></pre></td></tr></table></figure></li><li><p>直接使用对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;h1 :class&#x3D;&quot;&#123;red:true, italic:true, active:true, thin:true&#125;&quot;&gt;这是H1&lt;&#x2F;h1&gt;</span></pre></td></tr></table></figure></li></ol><h3 id="使用内联样式"><a href="#使用内联样式" class="headerlink" title="使用内联样式"></a>使用内联样式</h3><ol><li><p>直接在元素上通过 <code>:style</code> 的形式，书写样式对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;h1 :style&#x3D;&quot;&#123;color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;&#125;&quot;&gt;这是的H1&lt;&#x2F;h1&gt;</span></pre></td></tr></table></figure></li><li><p>将样式对象，定义到 <code>data</code> 中，并直接引用到 <code>:style</code> 中</p><ul><li>在data上定义样式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">data: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;h1 :style&#x3D;&quot;h1StyleObj&quot;&gt;这是H1&lt;&#x2F;h1&gt;</span></pre></td></tr></table></figure></li></ul></li><li><p>在 <code>:style</code> 中通过数组，引用多个 <code>data</code> 上的样式对象</p><ul><li>在data上定义样式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">data: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        h1StyleObj2: &#123; fontStyle: &#39;italic&#39; &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;h1 :style&#x3D;&quot;[h1StyleObj, h1StyleObj2]&quot;&gt;这是H1&lt;&#x2F;h1&gt;</span></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Vue指令之v-for和key属性"><a href="#Vue指令之v-for和key属性" class="headerlink" title="Vue指令之v-for和key属性"></a>Vue指令之<code>v-for</code>和<code>key</code>属性</h2><ol><li>迭代数组</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  &lt;li v-for&#x3D;&quot;(item, i) in list&quot;&gt;索引：&#123;&#123;i&#125;&#125; --- 姓名：&#123;&#123;item.name&#125;&#125; --- 年龄：&#123;&#123;item.age&#125;&#125;&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;ul&gt;</span></pre></td></tr></table></figure><ol start="2"><li>迭代对象中的属性</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;!-- 循环遍历对象身上的属性 --&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   &lt;div v-for&#x3D;&quot;(val, key, i) in userInfo&quot;&gt;&#123;&#123;val&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;i&#125;&#125;&lt;&#x2F;div&gt;</span></pre></td></tr></table></figure><ol start="3"><li>迭代数字</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;p v-for&#x3D;&quot;i in 10&quot;&gt;这是第 &#123;&#123;i&#125;&#125; 个P标签&lt;&#x2F;p&gt;</span></pre></td></tr></table></figure><blockquote><p>2.2.0+ 的版本里，<strong>当在组件中使用</strong> v-for 时，key 现在是必须的。</p></blockquote><p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “<strong>就地复用</strong>” 策略。如果数据项的顺序被改变，Vue将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</p><p>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p><h2 id="Vue指令之v-if和v-show"><a href="#Vue指令之v-if和v-show" class="headerlink" title="Vue指令之v-if和v-show"></a>Vue指令之<code>v-if</code>和<code>v-show</code></h2><p>v-if 的特点：每次都会重新删除或创建元素</p><p>v-show 的特点： 每次不会重新进行DOM的删除和创建操作，只是切换了元素的 display:none 样式</p><p>v-if 有较高的切换性能消耗<br>v-show 有较高的初始渲染消耗</p><blockquote><p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;框架和库的区别&quot;&gt;&lt;a href=&quot;#框架和库的区别&quot; class=&quot;headerlink&quot; title=&quot;框架和库的区别&quot;&gt;&lt;/a&gt;框架和库的区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://www.github.com/qyg2019/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://www.github.com/qyg2019/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>分布式版本控制系统Git常用命令浅谈</title>
    <link href="https://www.github.com/qyg2019/2019/11/30/1/"/>
    <id>https://www.github.com/qyg2019/2019/11/30/1/</id>
    <published>2019-11-30T12:10:21.813Z</published>
    <updated>2019-11-30T12:36:59.257Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是Git-Git下载地址"><a href="#什么是Git-Git下载地址" class="headerlink" title="什么是Git                                                                                                                   Git下载地址"></a>什么是Git                                                                                                                   <a href="https://git-scm.com/" target="_blank" rel="noopener">Git下载地址</a></h4><p>Git是目前世界上最先进的分布式版本控制系统,具有备份， 记录操作时间线，多端共享代码（代替各种云盘的功能），‘自动’合并的功能。Git是没有中心服务器的，每个人机器上都是一个完整的库，我们平时开发代码时的中央服务器其实和我们自己机器上的库内容基本是完全一样的。</p><h4 id="Git原理及基本操作"><a href="#Git原理及基本操作" class="headerlink" title="Git原理及基本操作"></a>Git原理及基本操作</h4><p><img src="/img/git.png" alt="git原理"></p><p>本地仓库分为工作区、缓冲区以及仓库,每个仓库可以简单理解成一个目录，这个目录里面的所有文件都通过Git来实现版本管理，Git都能跟踪并记录在该目录中发生的所有更新。</p><h5 id="安装好Git后，新建一个文件夹，单击右键gitbush-输入以下命令初始化一个本地仓库："><a href="#安装好Git后，新建一个文件夹，单击右键gitbush-输入以下命令初始化一个本地仓库：" class="headerlink" title="安装好Git后，新建一个文件夹，单击右键gitbush,输入以下命令初始化一个本地仓库："></a>安装好Git后，新建一个文件夹，单击右键gitbush,输入以下命令初始化一个本地仓库：</h5><p><img src="/img/init.png" alt="init"></p><p>可以看到出现了一个文件夹：                        <img src="/img/gits.png" alt="gits"></p><p>接下来就可以在这个文件夹中进行开发了。</p><p>一顿苦逼的开发之后……</p><h5 id="使用add命令将指定文件或全部文件推入缓冲区"><a href="#使用add命令将指定文件或全部文件推入缓冲区" class="headerlink" title="使用add命令将指定文件或全部文件推入缓冲区"></a>使用add命令将指定文件或全部文件推入缓冲区</h5><p>​                                                                         <img src="/img/add.png" alt="add"></p><p>​                                                                         <img src="/img/addbf.png" alt="add部分文件"></p><h5 id="使用commit命令推入本地仓库"><a href="#使用commit命令推入本地仓库" class="headerlink" title="使用commit命令推入本地仓库"></a>使用commit命令推入本地仓库</h5><p>​                                                                          <img src="/img/commit.png" alt="commit"></p><p>  至此一个版本开发完毕，当然git还提供更多命令来供用户操作，一起来了解下吧！</p><p>   git status： 查看仓库当前的状态 </p><p>​   git diff +文件名：查看文件具体修改了哪里</p><p>​   git log：查看最近到最远提交到仓库的文件信息(一串数字为特有的时间序列id 可以根据它进行版本前后回滚)</p><p>   git reset –hard HEAD^：回退到上一次 commit的时候</p><p>   git reset –hard bdeacd: 版本前进 只能根据 id进行前进（id只写出前六位就好了）</p><p>   git reflog：查看每次操作仓库内的信息（commit）这样的话当黑窗口没了的时候，也可以查询具体操作信息，</p><p>   进行版本回退或者前进!</p><p>   git checkout – read.txt: 工作区恢复到最近一次的commit或者add</p><p>   git rm +文件名: 删除某一个文件</p><h5 id="需要注意的是在开发尽量不要在master分支上进行，在开发完成后可以和master分支merge，因此会用到下列命令。"><a href="#需要注意的是在开发尽量不要在master分支上进行，在开发完成后可以和master分支merge，因此会用到下列命令。" class="headerlink" title="需要注意的是在开发尽量不要在master分支上进行，在开发完成后可以和master分支merge，因此会用到下列命令。"></a>需要注意的是在开发尽量不要在master分支上进行，在开发完成后可以和master分支merge，因此会用到下列命令。</h5><p>   git branch dev: 创建dev分支</p><p>   git checkout dev： 切换到dev分支上开发</p><p>   git branch：查看所有分支</p><p>   git branch -d dev：删除分支 （-D 强制删除）</p><p>   git merge dev: 合并分支</p><h5 id="在实际的开发过程中往往是多人协作开发，这就需要把本地仓库和github关联，进行以下操作："><a href="#在实际的开发过程中往往是多人协作开发，这就需要把本地仓库和github关联，进行以下操作：" class="headerlink" title="在实际的开发过程中往往是多人协作开发，这就需要把本地仓库和github关联，进行以下操作："></a>在实际的开发过程中往往是多人协作开发，这就需要把本地仓库和<a href="https://github.com/" target="_blank" rel="noopener">github</a>关联，进行以下操作：</h5><h5 id="1-首先要再github上创建远程仓库用来存储项目，和本地电脑达成信任关系（ssh）"><a href="#1-首先要再github上创建远程仓库用来存储项目，和本地电脑达成信任关系（ssh）" class="headerlink" title="1. 首先要再github上创建远程仓库用来存储项目，和本地电脑达成信任关系（ssh）"></a>1. 首先要再github上创建远程仓库用来存储项目，和本地电脑达成信任关系（ssh）</h5><h5 id="2-可以通过git-clone远程仓库（git-clone-git-github-com-HustCst-duyiApp-git）或者通过git-remote-add-origin-git-github-com-HustCst-duyiApp-git，是本地仓库和远程仓库相关联，git-pull-origin-master，本地才有master分支！"><a href="#2-可以通过git-clone远程仓库（git-clone-git-github-com-HustCst-duyiApp-git）或者通过git-remote-add-origin-git-github-com-HustCst-duyiApp-git，是本地仓库和远程仓库相关联，git-pull-origin-master，本地才有master分支！" class="headerlink" title="2.可以通过git clone远程仓库（git clone git@github.com:HustCst/duyiApp.git）或者通过git remote add origin git@github.com:HustCst/duyiApp.git，是本地仓库和远程仓库相关联，git pull origin master，本地才有master分支！"></a>2.可以通过git clone远程仓库（git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:HustCst/duyiApp.git）或者通过git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:HustCst/duyiApp.git，是本地仓库和远程仓库相关联，git pull origin master，本地才有master分支！</h5><h5 id="3-之后再本地master分支上的代码上传到-远程仓库上的master分支-第一次上传使用-git-push-–u-origin-master，之后可以简化命令，把-u去掉。（如果仓库里本身就有文件，但是我们不要了，而是想把远程的代码上传上去，我们可以通过-git-push-origin-master-–f-强行让master分支上的本地文件覆盖远程master分支上的文件）"><a href="#3-之后再本地master分支上的代码上传到-远程仓库上的master分支-第一次上传使用-git-push-–u-origin-master，之后可以简化命令，把-u去掉。（如果仓库里本身就有文件，但是我们不要了，而是想把远程的代码上传上去，我们可以通过-git-push-origin-master-–f-强行让master分支上的本地文件覆盖远程master分支上的文件）" class="headerlink" title="3.之后再本地master分支上的代码上传到 远程仓库上的master分支 第一次上传使用 git push –u origin master，之后可以简化命令，把-u去掉。（如果仓库里本身就有文件，但是我们不要了，而是想把远程的代码上传上去，我们可以通过 git push origin master –f 强行让master分支上的本地文件覆盖远程master分支上的文件）"></a>3.之后再本地master分支上的代码上传到 远程仓库上的master分支 第一次上传使用 git push –u origin master，之后可以简化命令，把-u去掉。（如果仓库里本身就有文件，但是我们不要了，而是想把远程的代码上传上去，我们可以通过 git push origin master –f 强行让master分支上的本地文件覆盖远程master分支上的文件）</h5><h2 id="ps"><a href="#ps" class="headerlink" title="ps:"></a>ps:</h2><p><strong>切记不要在本地master分支上开发，在其他分支如dev上开发后，合并到master上直接上传到 远程的 非master分支如dev分支，通过 git push origin master:dev; 之后项目参与者可以 new pull request 进行代码比对和阅读，项目管理人员在同意的情况下，会把远程dev分支上的东西合并到远程master分支上。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是Git-Git下载地址&quot;&gt;&lt;a href=&quot;#什么是Git-Git下载地址&quot; class=&quot;headerlink&quot; title=&quot;什么是Git                                                          
      
    
    </summary>
    
    
      <category term="Git" scheme="https://www.github.com/qyg2019/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.github.com/qyg2019/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.github.com/qyg2019/2019/11/29/hello-world/"/>
    <id>https://www.github.com/qyg2019/2019/11/29/hello-world/</id>
    <published>2019-11-29T08:58:12.644Z</published>
    <updated>2019-11-29T08:58:12.644Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
